@page "/"
@using TodoApp.Shared.Components
@using TodoApp.Models

<PageTitle>Blazor Tasker</PageTitle>

<MudContainer Class="align-items-center" MaxWidth="MaxWidth.Small">
    <MudText Style="font-weight: bold;" Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Blazor Tasker</MudText>
    <MudStack Spacing="7">
        <EditForm Model="@Task" OnSubmit="@AddTask">
            <MudStack Row="true" Class="d-flex flex-grow-1">
                <MudTextField Variant="Variant.Outlined" Label="Task Name" @bind-Value="@Task.TaskName" Immediate="true"></MudTextField>
                <MudButton ButtonType="ButtonType.Submit" Class="mt-1" Disabled="@IsTaskNameEmpty" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" StartIcon="@Icons.Material.Filled.AddCircle">Add</MudButton>
            </MudStack>
        </EditForm>
        @if (Tasks.Count > 0)
        {
            <MudStack Spacing="5">
                @foreach (TaskItem task in Tasks)
                {
                    <TaskItemComponent @key="@task.Id" Task="@task" OnCompleted="@(CompleteTask)" OnRemove="@(() => RemoveTask(task))"/>
                }
            </MudStack>
        }
        else
        {
            <Animation Effect="@Effect.FadeIn" Speed="@Speed.Faster">
                <MudStack Class="ma-3" Style="opacity: 0.2;">
                    <MudIcon Color="Color.Inherit" Class="align-self-center" Size="Size.Large" Icon="@Icons.Material.Filled.NoteAdd"/>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center" GutterBottom="true">No tasks, create one to get started.</MudText>
                </MudStack>
            </Animation>
        }
        <ProgressComponent Label="Completed" Percentage="@CompletedPercent"/>
        <ProgressComponent Label="In Progress" Percentage="@InProgressPercent"/>
    </MudStack>
</MudContainer>

@code
{
    public readonly List<TaskItem> Tasks = new();
    public TaskItem Task = new();
    
    public bool IsTaskNameEmpty => string.IsNullOrEmpty(Task.TaskName.Trim());
    public int CompletedPercent => Tasks.Count == 0 ? 0 : (int)((double)Tasks.Count(t => t.IsCompleted) / Tasks.Count * 100);
    public int InProgressPercent => Tasks.Count == 0 ? 0 : (int)((double)Tasks.Count(t => !t.IsCompleted) / Tasks.Count * 100);

    void AddTask()
    {
        Tasks.Add(Task);
        Task = new();
        StateHasChanged();
    }

    void CompleteTask()
    {
        StateHasChanged();
    }

    void RemoveTask(TaskItem taskItem)
    {
        Tasks.Remove(taskItem);
        StateHasChanged();
    }
}