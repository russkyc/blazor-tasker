@using TodoApp.Models

<Animation Effect="@Effect.FadeInLeft" Speed="@Speed.Faster">
    <Animation Effect="@Effect.FadeOutRight" Speed="@Speed.Faster" Enabled="_isDisposed" OnAnimationEnd="OnRemove">
        <MudPaper Outlined="true" Class="pa-6">
            <MudStack Row="true" Class="d-flex flex-grow-1 gap-4">
                <MudIcon Class="align-self-center" Size="Size.Large" Icon="@Icons.Material.Filled.Notes"/>
                <MudText Typo="Typo.subtitle1" Class="flex-grow-1 align-self-center">@Task.TaskName</MudText>
                @if (Task.IsCompleted)
                {
                    <MudButton Size="Size.Large" Class="align-self-center" StartIcon="@Icons.Material.Filled.Delete" @onclick="@Remove" Variant="Variant.Text" Color="Color.Default">Remove</MudButton>
                }
                else
                {
                    <MudButton Size="Size.Large" Class="align-self-center" StartIcon="@Icons.Material.Filled.Done" @onclick="@Complete" Variant="Variant.Filled" Color="Color.Primary">Complete</MudButton>
                }
            </MudStack>
        </MudPaper>
    </Animation>
</Animation>

@code
{
    private bool _isDisposed;

    [Parameter] public TaskItem Task { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public EventCallback OnCompleted { get; set; }

    void Remove()
    {
        _isDisposed = true;
    }

    void Complete()
    {
        Task.IsCompleted = true;
        OnCompleted.InvokeAsync();
    }
}